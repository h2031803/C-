#include <> : 기본으로 제공되는 헤더 파일을 include 할 때 사용 ( C++ 런타임 라이브러리에 기본으로 제공되는 헤더파일 존재)
#include "" : 소스파일이 있는 폴더(디렉터리)의 헤더 파일을 include 할 때 사용 (내가 만든 헤더 파일들)

헤더 파일 => 정의 X 선언 O ( 정의는 만들어 주는 것, 선언은 이름을 언급하는 것 ) 	***=> 헤더 파일에 정의까지 가끔 넣을 수 있는 듯 하다***
C++ 런타임 라이브러리에는 <정의가 되있는 파일>, <선언이 되어있는 헤더 파일> 가 존재(기본으로)

////
헤더 파일의 시작은 
#ifndef ADD_H
#define ADD_H (헤더 파일의 대문자 : 관례라고 보면됨)

헤더 파일의 중간은
선언내용이 들어감

헤더 파일의 끝은
#endif
/// --------------------------------------------> 이러한 방식의 메커니즘을 "헤더 가드"라고 한다(헤더 파일을 중복 include하여 같은 함수가 여러번 선언될 경우의 컴파일 오류 방지)

컴파일러가 #include "add.h" 라인을 컴파일 -> add.h의 내용을 현재 파일의 그 라인에 복사
(전방 선언)

전처리기 : 컴파일 직전에 실행되는 별도의 프로그램
전처리기의 역할 : #으로 되있는 코드(지시자)를 찾음 => 텍스트 치환, 디버깅 도움, 헤더 파일의 중복 포함 방지

#include 지시자 : 전처리기가 해당 지시자를 읽으면 해당 위치에 내용코드를 복사

#define 지시자 : 매크로 기능(단순한 텍스트 치환 기능)
#대체 텍스트가 없는 define 지시자는 조건부 컴파일( #ifndef #ifdef )시 사용된다

컴파일(코딩한거를 기계어로 변환) + 링크(모든 씨플플 파일들 연결?, 다른 씨플플 파일에서도 연결해서 사용할 수 있도록) => 빌드

